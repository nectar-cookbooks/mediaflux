#!/bin/sh
#
# Take a backup of the Mediaflux database and all assets
# and (optionally) rsync the backups to an "replica" location.
#

if [ -e /etc/mediaflux/servicerc ] ; then
    . /etc/mediaflux/servicerc
fi

DIR="<%= @backup_dir %>"
TMP_PREFIX="/tmp/mflux-backup-$$-"
LOG="$MFLUX_HOME/volatile/logs/backups.log"
REPLICA="<%= @replica %>"
STORE="<%= @object_store %>"
KEEP_DAYS="<%= @keep_days %>"
KEEP_SETS="<%= @keep_sets %>"

if [ ! -z "$STORE" ] ; then
    . /etc/mediaflux/openstackrc
fi

TIMESTAMP="date -Iseconds"

echo >> $LOG
chown $MFLUX_SYSTEM_USER:$MFLUX_SYSTEM_USER $LOG
echo "*** Starting mediaflux backup run - " `$TIMESTAMP` >> $LOG

rm -f "${TMP_PREFIX}*" > /dev/null 2>&1

echo "Cleaning old backups" >> $LOG
# First create the lists of directories to be kept and deleted
find $DIR -mindepth 1 -maxdepth 1 -type d -regextype posix-extended \
        -regex '.*/[0-9]{4}-[0-9]{2}-[0-9]{2}' | sort > ${TMP_PREFIX}all_dirs 
if [ -z "$KEEP_SETS" ] ; then 
    # Based on the age of the sets ... determined by their names
    NOW=`date +%s`
    CUTOFF=`expr $NOW - 86400 \* $KEEP_DAYS`
    CUTOFF_DIR=$DIR/`date --date=@${CUTOFF} +%Y-%m-%d`
    awk " { if ( \$1 < \"$CUTOFF_DIR\" ) print \$1 } " \
	< ${TMP_PREFIX}all_dirs > ${TMP_PREFIX}del_dirs
    awk " { if ( \$1 >= \"$CUTOFF_DIR\" ) print \$1 } " \
	< ${TMP_PREFIX}all_dirs > ${TMP_PREFIX}keep_dirs
else
    # Based on the number of "sets" to keep.
    HAVE_SETS=`cat ${TMP_PREFIX}all_dirs | wc -l`
    KEEP_SETS=`expr $KEEP_SETS - 1`
    if [ $HAVE_SETS -gt $KEEP_SETS ] ; then
	tail --lines=$KEEP_SETS < ${TMP_PREFIX}all_dirs > ${TMP_PREFIX}keep_dirs
	head --lines=`expr $HAVE_SETS - $KEEP_SETS` < ${TMP_PREFIX}all_dirs \
                > ${TMP_PREFIX}del_dirs
	rm ${TMP_PREFIX}all_dirs
    else
	mv ${TMP_PREFIX}all_dirs ${TMP_PREFIX}keep_dirs
        cat /dev/null > ${TMP_PREFIX}del_dirs
    fi
fi

# Step #2 delete the directories out of the local backup directory
echo Deleting local files >>$LOG
rm -rfv `cat ${TMP_PREFIX}del_dirs` >> $LOG 2>&1

# Step #3 delete corresponding objects from the object store
if [ ! -z "$STORE" ] ; then
    echo Deleting Object Store objects >>$LOG
    for D in `cat ${TMP_PREFIX}del_dirs` ; do
	PREFIX=`basename $D`
	swift delete $STORE `swift list $STORE --prefix ${PREFIX}/` >> $LOG 2>&1
    done
fi

TODAY=`date +%F`
TODAY_DIR=$DIR/$TODAY

if [ ! -e $TODAY ] ; then
    echo "Creating backup directory $TODAY_DIR" >> $LOG
    mkdir $TODAY_DIR
    chown $MFLUX_SYSTEM_USER:$MFLUX_SYSTEM_USER $TODAY_DIR
    chmod 750 $TODAY_DIR
fi

mf() {
    MF_COMMAND="$MFLUX_BIN/mfcommand"
    $MF_COMMAND logon $MFLUX_DOMAIN $MFLUX_USER "$MFLUX_PASSWORD" >> $LOG 2>&1
    RC=$?
    if [ $RC -ne 0 ] ; then
	echo "*** Mediaflux login failed ..." >> $LOG 2>&1
    else
	$MF_COMMAND "$@" >> $LOG 2>&1
	RC=$?	
	$MF_COMMAND logoff >> $LOG 2>&1
    fi
}

echo "*** Running mediaflux backups for $TODAY - " `$TIMESTAMP` >> $LOG

mf server.database.backup :url file:///$TODAY_DIR/database
LOCKED=1
if [ $RC -eq 0 ] ; then
    mf server.database.lock :action abort \
        :msg "The Mediaflux database and stores are being backed up"
    if [ $RC -eq 0 ] ; then
	LOCKED=1
    fi
fi
<% @stores.each do |store| %>
RRC=$RC
  <% if @external_asset_backup then %>
<%= @backup_wrapper %> $TODAY_DIR <%= store %> 
  <% else %>
mf asset.archive.create :url file:///$TODAY_DIR/<%= store %>.aar \
    :where content store '<%= store %>'
  <% end %>
if [ $RCC -ne 0 ] ; then
    RC = $RRC
fi
<% end %>

if [ $LOCKED -eq 1 ] ; then
    mf server.database.unlock
fi
if [ $RC -eq 0 ] ; then
    echo "*** Backup for $TODAY completed - " `$TIMESTAMP` >> $LOG
else
    echo "*** Backup for $TODAY failed - " `$TIMESTAMP` >> $LOG
    echo "Mediaflux backup for $TODAY failed; see log file"
    # This removes an empty failed backup directory so that it
    # does not count for the purposes of backup cycling.
    rmdir $TODAY_DIR >> $LOG 2>&1
    exit $RC
fi

if [ ! -z "$REPLICA" ] ; then
    echo "*** Replicating backups to $REPLICA - " `$TIMESTAMP` >> $LOG
    OPTS="-av --delete-before"
    rsync $OPTS $DIR $REPLICA >> $LOG 2>&1
    RC=$?
    if [ $RC -ne 0 ] ; then
	echo "*** Backup replication failed - " `$TIMESTAMP` >> $LOG
	echo "Mediaflux backup replication failed; see log file"
    else
	echo "*** Backup replication completed - " `$TIMESTAMP` >> $LOG
    fi
fi

if [ ! -z "$STORE" ] ; then
    echo "*** Exporting backup to Object Store $STORE - " `$TIMESTAMP` >> $LOG
    cd $DIR
    swift upload -c $STORE . >> $LOG 2>&1
    RC=$?
    if [ $RC -ne 0 ] ; then
	echo "*** Backup save to Swift failed - " `$TIMESTAMP` >> $LOG
	echo "Mediaflux backup save to Swift failed; see log file"
    else
	echo "*** Backup save to Swift completed - " `$TIMESTAMP` >> $LOG
    fi 
fi

if [ $RC -eq 0 ] ; then
    rm -f "${TMP_PREFIX}"* > /dev/null 2>&1
fi

exit $RC
