#!/bin/sh
#
# Take a backup of the Mediaflux database and all assets
# and (optionally) rsync the backups to an "replica" location.
#

if [ -e /etc/mediaflux/servicerc ] ; then
    . /etc/mediaflux/servicerc
fi

DIR=<%= @backup_dir %>
LOG=$MFLUX_HOME/volatile/logs/backups.log
REPLICA=<%= @replica %>
KEEP_DAYS=<%= @keep_days %>

echo "*** Starting backup run - " `date` >> $LOG

echo "Cleaning old backups" >> $LOG
find $DIR -type f -ctime -$KEEP_DAYS -exec rm {} \; >> $LOG 2>&1
find $DIR -mindepth 1 -type d -ctime -$KEEP_DAYS \
    -exec rmdir --ignore-fail-on-non-empty \{\} \; >> $LOG 2>&1

TODAY=`date +%F`
TODAY_DIR=$DIR/$TODAY

if [ ! -e $TODAY ] ; then
    echo "Creating backup directory $TODAY_DIR" >> $LOG
    mkdir $TODAY_DIR
    chown $MFLUX_SYSTEM_USER:$MFLUX_SYSTEM_USER $TODAY_DIR
    chmod 750 $TODAY_DIR
fi

echo "Running backup for $TODAY" >> $LOG
MF_COMMAND="$MFLUX_BIN/mfcommand"
$MF_COMMAND logon $MFLUX_DOMAIN $MFLUX_USER "$MFLUX_PASSWORD"
$MF_COMMAND source -dir=$TODAY_DIR $MFLUX_HOME/config/daris_backup.tcl
RC=$?
$MF_COMMAND logoff

if [ $RC -eq 0 ] ; then
    echo "Backup for $TODAY completed" >> $LOG
else
    echo "Backup for $TODAY failed" >> $LOG
    echo "Mediaflux backup for $TODAY failed; see log file"
    exit $RC
fi

if [ ! -z "$REPLICA" ] ; then
    echo "Rsyncing backups" >> $LOG
    OPTS="-av --dry-run --delete-before"
    if [ `expr match $REPLICA ".+:"` -eq 0 ] ; then 
        OPTS="$OPTS --delete-before"
    fi
    rsync $OPTS $DIR $REPLICA >> $LOG 2>&1
    RC=$?
    if [ $RC -ne 0 ] ; then
	echo "Rsync failed" >> $LOG
	echo "Mediaflux backup rsync failed; see log file"
    fi
fi

exit $RC
